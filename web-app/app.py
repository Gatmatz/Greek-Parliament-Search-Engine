from flask import Flask, request, render_template
from backbone.search import perform_query
from backbone.fetching import fetch_speech
from analytics.similarities.top_k_similarities import fetch_top_k
import json

"""
The app.py contains the core of the web application.
    - Every function contains the root of each page of the web app and the needed execution.
    - The main function contains the start of the application.
"""

app = Flask(__name__)


@app.route('/')
def homepage():
    """
    The homepage of the web application with a search bar and the analytics options.
    """
    return render_template('homepage.html')


@app.route('/query_results')
def query_results():
    """
    The results of the given query. The results are generated by the perform_query function and are passed to
    HTML using the render_template function.
    """
    query = request.args.get('query')
    query_results = perform_query(query, stopwords_flag=False)
    if query_results is None or len(query_results) == 0:
        return render_template('error.html')
    else:
        return render_template('results.html', search_query=query, search_results=query_results)


@app.route('/show_speech/<int:result_id>')
def show_speech(result_id):
    """
    The function shows the whole information of a selected speech.
    The speech is fetched by the fetch_speech function and passed to the HTML using the render_template function.
    """
    result = fetch_speech(result_id)
    return render_template('speech.html', result=result)


@app.route('/analytics/keywords')
def keywords():
    """
    Read important keywords results from a JSON file and render it.
    """
    with open('../analytics/keywords/top_keywords_results.json', 'r', encoding='utf-8') as json_file:
        keywords = json.load(json_file)
    return render_template('keywords.html', keywords_data=keywords)


@app.route('/analytics/similarities', methods=['GET'])
def similarities():
    """
    The function takes the number of k for the user and using the fetch_top_k function returns the top-k pairwise
    similarities. The pairs are shown using the render_template function.
    """
    # Get the 'k' parameter from the query string
    k = int(request.args.get('k', 10))  # Default to 10 if 'k' is not provided
    # Fetch top k pairs
    pairs = fetch_top_k(k)
    return render_template('similarities.html', pairs=pairs)


@app.route('/analytics/lsi', methods=['GET', 'POST'])
def lsi():
    """
    Render the content of the LSI results file.
    """
    with open(f'../analytics/LSI/results/topics100.txt', 'r', encoding='utf-8') as file:
        lsi_content = file.read()
    if request.method == 'POST':
        num_topics = request.form.get('num_topics')
        with open(f'../analytics/LSI/results/topics{num_topics}.txt', 'r', encoding='utf-8') as file:
            lsi_content = file.read()
    return render_template('LSI.html', lsi_content=lsi_content)


@app.route('/analytics/ner')
def ner():
    """
    Render the content of the Named Entity Recognition results file.
    """
    with open('../analytics/NER/output/frequent.txt', 'r', encoding='utf-8') as file:
        ner_content = file.read()
    return render_template('NER.html', ner_content=ner_content)


if __name__ == '__main__':
    app.run()
